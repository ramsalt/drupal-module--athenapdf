<?php

/**
 * Implements hook_menu().
 */
function athenapdf_menu() {
  $items = array();

  $items['node/%node/pdf'] = array(
    'title' => 'PDF Export',
    'page callback' => 'athenapdf_view',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/node.pdf.inc',
  );
  $items['node/%node/pdf/html'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(1),
    'page callback' => 'node_page_view',
    'page arguments' => array(1),
    'access callback' => '_athenapdf_access',
    'access arguments' => array(1),
  );

  $items['admin/config/media/athenapdf'] = array(
    'title' => 'Athenapdf',
    'description' => 'Configuration for Athenapdf',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('athenapdf_admin_form'),
    'access callback' => '_athenapdf_access',
    'access arguments'  => array('administer site configuration', 1),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: Athenapdf settings
 *
 * @see athenapdf_menu()
 */
function athenapdf_admin_form($form, &$form_state) {
  $file_option = array(
    'private' => t('Private files'),
  );

  $form['private_files_form'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Save pdfs in private directory'),
    '#default_value' => variable_get('private_files_form', 0),
    '#description' => t('Option to save the pdfs files in the private file directory'),
    '#options' => $file_option,
  );

  return system_settings_form($form);
}

/**
 * Grant PDF creation access for user, with update permission or a token.
 */
function _athenapdf_access($node) {
  // Check if the user requested the URL with a athenapdf token and validate it.
  $query_parameters = drupal_get_query_parameters();
  if (isset($query_parameters['athenapdf_token']) && $query_parameters['athenapdf_token'] === variable_get('athenapdf_secret')) {
    return TRUE;
  }

  // Otherwise deny the access.
  return FALSE;
}

function athenapdf_node_update($node) {
  db_delete('pdf_export_files')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Shows a pdf generated if existing on the node or generate it.
 *
 * @param $node
 *   The currently processed node object.
 *
 * @return bool|stdClass
 *   File object or false on failure.
 */
function athenapdf_view ($node) {
  if($fid = $node->pdf_export) {
    // File is already genereated. Show it.
    $file = file_load($fid);
    athenapdf_view_file($file, $node);
  } else {
    if($file = athenapdf_create_file($node)) {
      db_insert('pdf_export_files')
      ->fields(array(
        'nid' => $node->nid,
        'fid' => $file->fid,
        'created' => REQUEST_TIME,
      ))->execute();

      watchdog('pdf_export', t('Generated PDF-file: %fid for node %nid', ['%fid'=> $file->fid, '%nid'=>$node->nid]));

      athenapdf_view_file($file, $node);
    }
  }
}

function athenapdf_view_file ($file, $node) {
  header('Content-type: application/pdf');
  header('Content-Disposition: inline; filename="pdf-export-' . $node->nid . '.pdf"');
  header('Content-Transfer-Encoding: binary');
  header('Accept-Ranges: bytes');

  print file_get_contents(drupal_realpath($file->uri));
  drupal_exit();
}

/**
 * Creates and store PDF export file.
 *
 * @param $node
 *   The currently processed node object.
 *
 * @return bool|stdClass
 *   File object or false on failure.
 */
function athenapdf_create_file($node) {
  // Create the article export pdf.
  module_load_include('inc', 'athenapdf', 'includes/node.pdf');
  try {
    $pdf = athenapdf_process_node($node, 'S');
  } catch (Exception $e) {
    drupal_set_message(t('The PDF was not saved. Error: @error_message', array('@error_message' => $e->getMessage())));
    return FALSE;
  }

  // Save the returned pdf stream.
  // TODO Create checkbox in the module to allow store it in public or private
  $pdfDir = 'public://pdf-export';
  file_prepare_directory($pdfDir, FILE_CREATE_DIRECTORY);
  $destination = $pdfDir.'/pdf-export-' . $node->nid . '.pdf';
  return file_save_data($pdf, $destination, FILE_EXISTS_REPLACE);
}
